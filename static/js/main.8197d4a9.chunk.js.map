{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","isValidateUrl","onChange","useState","Math","random","toString","slice","id","touched","setToched","errorValidate","setErrorValidate","hasError","hasValidationError","validateUrl","htmlFor","classNames","type","placeholder","event","target","onBlur","NewMovie","onAdd","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","hasMovie","isSubmited","validation","url","RegExp","test","onSubmit","e","preventDefault","prev","str","trim","disabled","App","moviesFromServer","setMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8197d4a9.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  isValidateUrl?: (newValue: string) => boolean | undefined,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  isValidateUrl = () => {},\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur) setErrorValidation\n  const [touched, setToched] = useState(false);\n  const [errorValidate, setErrorValidate] = useState(false);\n  const hasError = touched && required && !value;\n  const hasValidationError = errorValidate;\n\n  // const validateError = () => {\n  //   setErrorValidate(true);\n  // };\n\n  const validateUrl = () => {\n    if (!isValidateUrl(value)) {\n      setErrorValidate(false);\n    }\n\n    setErrorValidate(true);\n  };\n\n  // const validation = (url: string) => {\n  //   // eslint-disable-next-line max-len\n  //   const pattern = new RegExp(/^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/);\n  //   console.log(pattern.test(url));\n\n  //   return pattern.test(url);\n  // };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => [onChange(event.target.value), validateUrl]}\n          onBlur={() => [setToched(true)]}\n\n        />\n      </div>\n\n      {hasValidationError && (\n        <p className=\"help is-danger\">Url is not correct</p>\n      )}\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (newMovie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n\n  const hasMovie = title && imdbUrl && imgUrl && imdbId;\n  const isSubmited = hasMovie === '';\n\n  const reset = () => {\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n  };\n\n  const validation = (url: string) => {\n    // eslint-disable-next-line max-len\n    const pattern = new RegExp(/^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/);\n\n    return pattern.test(url);\n  };\n\n  const submitNewMovie = (\n    e: React.BaseSyntheticEvent<Event,\n    EventTarget & HTMLFormElement, EventTarget>,\n  ) => {\n    e.preventDefault();\n\n    // validation(imgUrl);\n    // validation(imdbUrl);\n\n    if (hasMovie && validation(imgUrl) && validation(imdbUrl)) {\n      const newFilm = {\n        title,\n        description,\n        imgUrl,\n        imdbUrl,\n        imdbId,\n      };\n\n      onAdd(newFilm);\n      setCount(prev => prev + 1);\n      reset();\n    }\n  };\n\n  const changeTitle = (str: string) => {\n    setTitle(str.trim());\n  };\n\n  const changeDES = (str: string) => {\n    setDescription(str.trim());\n  };\n\n  const changeImgUrl = (str: string) => {\n    setImgUrl(str.trim());\n  };\n\n  const changeImdbUrl = (str: string) => {\n    setImdbUrl(str.trim());\n  };\n\n  const changeImdbId = (str: string) => {\n    setImdbId(str.trim());\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={submitNewMovie}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={changeTitle}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={changeDES}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={changeImgUrl}\n        required\n        isValidateUrl={() => validation(imgUrl)}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={changeImdbUrl}\n        required\n        isValidateUrl={() => validation(imdbUrl)}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={changeImdbId}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isSubmited}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovie] = useState<Movie[]>(moviesFromServer);\n\n  const onAdd = (movie: Movie) => {\n    setMovie(prev => {\n      return [...prev, movie];\n    });\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={onAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}